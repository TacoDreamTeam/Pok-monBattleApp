<!DOCTYPE hibernate-configuration PUBLIC	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<!-- DTD stands for Document Type Definition -->
<!-- What is XML 
		XML stands for eXtensible Markup Language 
		it's a markup language that defines a set of rules for encoding documents that
		is both human and machine readable


 -->
 
 <!-- Here we are defining the Hibernate Configuration Class Object 
 		which defines the properties of the session needed to communitcate with our DB-->
 <hibernate-configuration>
 	<session-factory>
 		<property name="hibernate.connection.username">postgres</property>
 		
 		<property name="hibernate.connection.password">postgres</property>
 		
 		<property name="hibernate.connection.url">
 			jdbc:postgresql://pokemonbattledb.csi7ymbiazo1.us-east-2.rds.amazonaws.com:5432/postgres?currentSchema="PokemonBattleDB"

 		</property>
 		
 		<!-- Driver Properties -->
 		<property name="hibernate.connection.driver-class">org.postgresql.Driver</property>
 		<property name="hibernate.connection.dialect">org.hibernate.dialect.PostgreSQLDialect</property>
 		
 		<property name="hibernate.show_sql">false</property>
 		<property name="hibernate.format_sql">false</property>
 		
 		<!-- Connection Pool properties: Default size of connections is 20 
 				The Connection pool is a method of speeding up DB calls. Every time Hibernate is started, 20 connections
 				are established to our DB. This way, when a session is created (an operation against our DB), it is much 
 				faster than just plain JDBC-->
 		<property name="hibernate.connection.pool_size">10</property>
 		
 		<!-- hbm2ddl.auto this is a special property that exports schema DDL to the database when the SessionFactory is created -->
 		<property name="hibernate.hbm2ddl.auto">create</property>
 		<!-- CREATE, VALIDATE, UPDATE, NONE -->
 		
 		<!-- CREATE: drops all existing tables and objects with the names provided in annotations,
 		and then hibernate will recreate the schema for us (Create isn't the best for production but useful for development)-->
 		
 		<!-- UPDATE: hibernate will not delete anything, but only add to a schema if there are objects that haven't been
 		included yet. -->
 		
 		<!-- VALIDATE: (best for production) Checks to make sure that everything is as expected (all tables and objects are where 
 		they're supposed to be -->
 		
 		<!-- NONE: hibernate will not do anything, no removals or additions -->
 		
 		
 		<!-- Class Mapping -->
 		<mapping class="com.revature.models.PokeDeck"/>
 		<mapping class="com.revature.models.PokeType"/>
 		<mapping class="com.revature.models.Trainer"/>
 		<mapping class="com.revature.models.Team"/>
 		<mapping class="com.revature.models.Trades"/>
 		<mapping class="com.revature.models.Pokemon"/>
 		
 	</session-factory>
 
 </hibernate-configuration>